{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst input = document.querySelector('#datetime-picker');\nconst btnStart = document.querySelector('[data-start]');\nconst timerDays = document.querySelector('[data-days]');\nconst timerHours = document.querySelector('[data-hours]');\nconst timerMinutes = document.querySelector('[data-minutes]');\nconst timerSeconds = document.querySelector('[data-seconds]');\n\nlet userSelectedDate = 0;\nbtnStart.disabled = true;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    userSelectedDate = selectedDates[0];\n    if (userSelectedDate < new Date()) {\n      iziToast.error({\n        position: 'topRight',\n        title: 'Error',\n        message: 'Please choose a date in the future',\n      });\n      btnStart.disabled = true;\n    } else {\n      btnStart.disabled = false;\n      input.disabled = true;\n     }\n  },\n};\n\nflatpickr(input, options);\n\nbtnStart.addEventListener('click', startTimer);\n\nlet intervalId = 0;\n\nfunction startTimer() {\n  btnStart.disabled = true; \n  input.disabled = true;\n  intervalId = setInterval(() => {\n    const currentTime = Date.now();\n    const deltaTime = userSelectedDate - currentTime;\n\n    if (deltaTime <= 0) {\n      clearInterval(intervalId);\n      return;\n    }\n\n    const time = convertMs(deltaTime);\n    updateTimer(time);\n  }, 1000);\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor((ms % hour) / minute);\n  const seconds = Math.floor((ms % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction updateTimer({ days, hours, minutes, seconds }) {\n  timerDays.textContent = String(days).padStart(2, '0');\n  timerHours.textContent = String(hours).padStart(2, '0');\n  timerMinutes.textContent = String(minutes).padStart(2, '0');\n  timerSeconds.textContent = String(seconds).padStart(2, '0');\n}\n"],"names":["input","btnStart","timerDays","timerHours","timerMinutes","timerSeconds","userSelectedDate","options","selectedDates","iziToast","flatpickr","startTimer","intervalId","currentTime","deltaTime","time","convertMs","updateTimer","ms","days","hours","minutes","seconds"],"mappings":"+IAKA,MAAMA,EAAQ,SAAS,cAAc,kBAAkB,EACjDC,EAAW,SAAS,cAAc,cAAc,EAChDC,EAAY,SAAS,cAAc,aAAa,EAChDC,EAAa,SAAS,cAAc,cAAc,EAClDC,EAAe,SAAS,cAAc,gBAAgB,EACtDC,EAAe,SAAS,cAAc,gBAAgB,EAE5D,IAAIC,EAAmB,EACvBL,EAAS,SAAW,GAEpB,MAAMM,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBF,EAAmBE,EAAc,CAAC,EAC9BF,EAAmB,IAAI,MACzBG,EAAS,MAAM,CACb,SAAU,WACV,MAAO,QACP,QAAS,oCACjB,CAAO,EACDR,EAAS,SAAW,KAEpBA,EAAS,SAAW,GACpBD,EAAM,SAAW,GAEpB,CACH,EAEAU,EAAUV,EAAOO,CAAO,EAExBN,EAAS,iBAAiB,QAASU,CAAU,EAE7C,IAAIC,EAAa,EAEjB,SAASD,GAAa,CACpBV,EAAS,SAAW,GACpBD,EAAM,SAAW,GACjBY,EAAa,YAAY,IAAM,CAC7B,MAAMC,EAAc,KAAK,MACnBC,EAAYR,EAAmBO,EAErC,GAAIC,GAAa,EAAG,CAClB,cAAcF,CAAU,EACxB,MACD,CAED,MAAMG,EAAOC,EAAUF,CAAS,EAChCG,EAAYF,CAAI,CACjB,EAAE,GAAI,CACT,CAEA,SAASC,EAAUE,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAOH,EAAK,KAAQ,GAAM,EACzCI,EAAU,KAAK,MAAOJ,EAAK,IAAU,GAAM,EAEjD,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASL,EAAY,CAAE,KAAAE,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CACtDpB,EAAU,YAAc,OAAOiB,CAAI,EAAE,SAAS,EAAG,GAAG,EACpDhB,EAAW,YAAc,OAAOiB,CAAK,EAAE,SAAS,EAAG,GAAG,EACtDhB,EAAa,YAAc,OAAOiB,CAAO,EAAE,SAAS,EAAG,GAAG,EAC1DhB,EAAa,YAAc,OAAOiB,CAAO,EAAE,SAAS,EAAG,GAAG,CAC5D"}